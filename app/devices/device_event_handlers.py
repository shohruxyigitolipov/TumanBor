from asyncio import Queue

from app.devices.ws_connection import ws_manager
from app.events.emitters import event_bus
import datetime
from logger_module.logging_utils import get_logger_factory

get_logger = get_logger_factory(__name__)
logger = get_logger()




@event_bus.on("device_connected")
async def handle_connect(device_id):
    logger.info(f'‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {device_id} –ø–æ–¥–∫–ª—é—á–µ–Ω–æ.')
    await ws_manager.send_personal(device_id, '–í—ã –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å')


@event_bus.on("device_disconnected")
async def handle_disconnect(device_id):
    logger.info(f"[{device_id}] –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏ —É–¥–∞–ª–µ–Ω–∞.‚ùå")
    await ws_manager.disconnect(device_id)


@event_bus.on('websocket_disconnected')
async def handle_ws_disconnect(device_id):
    logger.info(f'[{device_id}], Websocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ.‚õìÔ∏è‚Äçüí•')


@event_bus.on("message_from_device")
async def handle_message(device_id, message):
    logger.info(f"üì® {device_id} –ø—Ä–∏—Å–ª–∞–ª: {message}")
    # await ws_manager.send_personal(device_id=device_id, message=f"–í—ã —Å–∫–∞–∑–∞–ª–∏: {message}")
    await ws_manager.set_response(device_id=int(device_id), message=message)


@event_bus.on('message_to_device')
async def handle_message_to_device(device_id, message):
    logger.info(f'{device_id}, –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}')


@event_bus.on('message_failed')
async def handle_failed_msg(device_id, message):
    logger.info(f'{device_id}, –°–æ–æ–±—â–µ–Ω–∏–µ: "{message}" –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ –¥–æ—à–ª–æ –¥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞')


@event_bus.on('device_timeout')
async def handle_timeout(device_id, last_pong_time):
    logger.info(f'–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {datetime.datetime.now()}\n'
                f'–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ pong\'–∞: {last_pong_time}'
                f"[{device_id}] –¢–∞–π–º–∞—É—Ç heartbeat")


@event_bus.on('device_send_error')
async def handle_send_error(device_id, error):
    logger.info(f'[{device_id}], –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {error}')


@event_bus.on('device_error')
async def handle_error(device_id, error):
    logger.info(f"[{device_id}] –û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {error}")


@event_bus.on('device_session_end')
async def handle_session_end(device_id):
    logger.info(f'[{device_id}], –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.')


@event_bus.on('websocket_wrong_auth_token')
async def handle_auth_token_wrong(device_id):
    logger.info(f'[{device_id}], –ù–µ–≤–µ—Ä–Ω—ã–π auth_token.')
    await ws_manager.send_personal(device_id, message='–ù–µ–≤–µ—Ä–Ω—ã–π auth_token')
